import org.springframework.jdbc.core.BeanPropertyRowMapper
import org.springframework.jdbc.core.JdbcTemplate

class PizzaRepository {

    lateinit var jdbcTemplate: JdbcTemplate

    fun iniciar() {
        jdbcTemplate = Conexao().conectar()
    }

    fun criarTabela() {
        jdbcTemplate.execute(
            """
        create table if not exists pizza (
            codigo int GENERATED BY DEFAULT AS IDENTITY primary key,
            sabor varchar(30),
            preco numeric,
            quantidade int
        )
        """
        )
    }

    fun cadastrar(novaPizza: Pizza) {
        jdbcTemplate.update("""
        insert into pizza (sabor, preco, quantidade) 
        values
('${novaPizza.sabor}', ${novaPizza.preco}, ${novaPizza.quantidade})            
        """)
    }

    fun getUltimoCodigo():Int {
        /*
        queryForObject -> usamos quando a consulta retorna
        1 e somente 1 linha!
        Int::class.java -> indica que o resultado será convertido
        num objeto do tipo Int
        ::class.java -> Sempre que mencionamos uma classe, fazemos assim
         */
        val ultimoCodigo = jdbcTemplate.queryForObject("""
        select max(codigo) from pizza    
        """, Int::class.java
        )

        return ultimoCodigo
    }

    fun vender(codigo: Int):Boolean {
        val atualizados = jdbcTemplate.update("""
       update pizza set quantidade = quantidade-1
       where 
       codigo = $codigo
       and quantidade > 0
       """)

        return atualizados == 1
    }

    fun recuperar(codigo: Int):Pizza {

        val pizza = jdbcTemplate.queryForObject("""
        select * from pizza where codigo = $codigo    
        """, BeanPropertyRowMapper(Pizza::class.java))
        /*
Caso a consulta seja um objeto complexo
(ou seja, não seja um Int ou String ou Double ou Boolean),
após a instrução SQL devemos usar BeanPropertyRowMapper(<classe>)
         */
        return pizza
    }

    fun atualizarPreco(codigo: Int, novoPreco:Double):Boolean {
        val atualizados = jdbcTemplate.update("""
           update pizza set preco = $novoPreco
           where 
           codigo = $codigo
        """)

        return atualizados == 1
    }
}