import org.apache.commons.dbcp2.BasicDataSource
import org.springframework.jdbc.core.BeanPropertyRowMapper
import org.springframework.jdbc.core.JdbcTemplate
import javax.swing.JOptionPane

fun main() {
    val musica1 = Musica()

    musica1.interprete = JOptionPane.showInputDialog("Insira o interprete: ")
    musica1.acessosSpotify = JOptionPane.showInputDialog("Insira o acesso no Spotitify: ").toInt()
    JOptionPane.showMessageDialog(null, "A música cantada por ${musica1.interprete} teve ${musica1.acessosSpotify} acessos no Spotify")
    var acessoEncerrado = JOptionPane.showInputDialog("O acesso ao spotify foi encerrado? Digite 1 para sim ou qualque outra coisa para não").toInt()

    if (acessoEncerrado == 1){
        musica1.acessoEncerrado = true
    }

    val musica2 = Musica()

    musica2.interprete = JOptionPane.showInputDialog("Insira o interprete: ")
    musica2.acessosSpotify = JOptionPane.showInputDialog("Insira o acesso no Spotitify: ").toInt()
    JOptionPane.showMessageDialog(null, "A música cantada por ${musica2.interprete} teve ${musica2.acessosSpotify} acessos no Spotify")
    var acessoEncerrado2 = JOptionPane.showInputDialog("O acesso ao spotify foi encerrado? Digite 1 para sim ou qualque outra coisa para não").toInt()

    if (acessoEncerrado2 == 1){
        musica2.acessoEncerrado = true
    }


    //Estabelecendo conexão
    val dataSource = BasicDataSource()

    // Dados da conexão
    dataSource.driverClassName = "org.h2.Driver" // classe do Driver de banco

    dataSource.url = "jdbc:h2:mem:musicas" // banco em memória

    dataSource.username = "sa"

    dataSource.password = ""

    val jdbcTemplate = JdbcTemplate(dataSource)

    jdbcTemplate.execute("""
       CREATE TABLE musica(
    id INT GENERATED BY DEFAULT AS IDENTITY primary key,
    interprete varchar(45),
    acessosSpotify int,
    acessoEncerrado boolean
)
    """)
    val linhasAfetadas = jdbcTemplate.update("""
        insert into musica (interprete, acessosSpotify, acessoEncerrado) values
        ('${musica1.interprete}', ${musica1.acessosSpotify}, ${musica1.acessoEncerrado}), ('${musica2.interprete}', ${musica2.acessosSpotify}, ${musica2.acessoEncerrado})
    """)
    println("$linhasAfetadas linhas inseridas")

    val musicas = jdbcTemplate.queryForList("select * from musica")
    println(musicas)

    val listaMusicas:List<Musica> = jdbcTemplate.query(
        "select * from musica",
        BeanPropertyRowMapper(Musica::class.java)
    )

    if (musica1.acessoEncerrado == true){
        JOptionPane.showMessageDialog(null, " A música do intérprete ${musica1.interprete}, possui ${musica1.acessosSpotify} acessos no Spotify. Ela já teve o acesso encerrado na plataforma")
    } else {
        JOptionPane.showMessageDialog(null, " A música do intérprete ${musica1.interprete}, possui ${musica1.acessosSpotify} acessos no Spotify. Ela ainda não teve o acesso encerrado na plataforma")
    }

    if (musica2.acessoEncerrado == true){
        JOptionPane.showMessageDialog(null, " A música do intérprete ${musica2.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela já teve o acesso encerrado na plataforma")
    } else {
        JOptionPane.showMessageDialog(null, " A música do intérprete ${musica2.interprete}, possui ${musica2.acessosSpotify} acessos no Spotify. Ela ainda não teve o acesso encerrado na plataforma")
    }



    jdbcTemplate.update("""
        truncate table musica
    """)

    val verificarExclusao = jdbcTemplate.queryForList("select * from musica")
    println(verificarExclusao)


}